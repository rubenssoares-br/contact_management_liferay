/**
 * SPDX-FileCopyrightText: (c) 2024 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package com.liferay.contact.management.model.impl;

import com.liferay.contact.management.model.ContactEntry;
import com.liferay.contact.management.model.ContactEntryModel;
import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the ContactEntry service. Represents a row in the &quot;CTMG_ContactEntry&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>ContactEntryModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ContactEntryImpl}.
 * </p>
 *
 * @author Rubens Soares
 * @see ContactEntryImpl
 * @generated
 */
@JSON(strict = true)
public class ContactEntryModelImpl
	extends BaseModelImpl<ContactEntry> implements ContactEntryModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a contact entry model instance should use the <code>ContactEntry</code> interface instead.
	 */
	public static final String TABLE_NAME = "CTMG_ContactEntry";

	public static final Object[][] TABLE_COLUMNS = {
		{"entryId", Types.BIGINT}, {"familyRelationship", Types.VARCHAR},
		{"phone", Types.BIGINT}, {"address", Types.VARCHAR},
		{"contactId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("entryId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("familyRelationship", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("phone", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("address", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("contactId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table CTMG_ContactEntry (entryId LONG not null primary key,familyRelationship VARCHAR(75) null,phone LONG,address VARCHAR(75) null,contactId LONG)";

	public static final String TABLE_SQL_DROP = "drop table CTMG_ContactEntry";

	public static final String ORDER_BY_JPQL =
		" ORDER BY contactEntry.familyRelationship ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY CTMG_ContactEntry.familyRelationship ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CONTACTID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long FAMILYRELATIONSHIP_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public ContactEntryModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _entryId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setEntryId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _entryId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return ContactEntry.class;
	}

	@Override
	public String getModelClassName() {
		return ContactEntry.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<ContactEntry, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<ContactEntry, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<ContactEntry, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((ContactEntry)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<ContactEntry, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<ContactEntry, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(ContactEntry)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<ContactEntry, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<ContactEntry, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map<String, Function<ContactEntry, Object>>
			_attributeGetterFunctions;

		static {
			Map<String, Function<ContactEntry, Object>>
				attributeGetterFunctions =
					new LinkedHashMap<String, Function<ContactEntry, Object>>();

			attributeGetterFunctions.put("entryId", ContactEntry::getEntryId);
			attributeGetterFunctions.put(
				"familyRelationship", ContactEntry::getFamilyRelationship);
			attributeGetterFunctions.put("phone", ContactEntry::getPhone);
			attributeGetterFunctions.put("address", ContactEntry::getAddress);
			attributeGetterFunctions.put(
				"contactId", ContactEntry::getContactId);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map<String, BiConsumer<ContactEntry, Object>>
			_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<ContactEntry, ?>>
				attributeSetterBiConsumers =
					new LinkedHashMap<String, BiConsumer<ContactEntry, ?>>();

			attributeSetterBiConsumers.put(
				"entryId",
				(BiConsumer<ContactEntry, Long>)ContactEntry::setEntryId);
			attributeSetterBiConsumers.put(
				"familyRelationship",
				(BiConsumer<ContactEntry, String>)
					ContactEntry::setFamilyRelationship);
			attributeSetterBiConsumers.put(
				"phone",
				(BiConsumer<ContactEntry, Long>)ContactEntry::setPhone);
			attributeSetterBiConsumers.put(
				"address",
				(BiConsumer<ContactEntry, String>)ContactEntry::setAddress);
			attributeSetterBiConsumers.put(
				"contactId",
				(BiConsumer<ContactEntry, Long>)ContactEntry::setContactId);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@JSON
	@Override
	public long getEntryId() {
		return _entryId;
	}

	@Override
	public void setEntryId(long entryId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_entryId = entryId;
	}

	@JSON
	@Override
	public String getFamilyRelationship() {
		if (_familyRelationship == null) {
			return "";
		}
		else {
			return _familyRelationship;
		}
	}

	@Override
	public void setFamilyRelationship(String familyRelationship) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_familyRelationship = familyRelationship;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalFamilyRelationship() {
		return getColumnOriginalValue("familyRelationship");
	}

	@JSON
	@Override
	public long getPhone() {
		return _phone;
	}

	@Override
	public void setPhone(long phone) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_phone = phone;
	}

	@JSON
	@Override
	public String getAddress() {
		if (_address == null) {
			return "";
		}
		else {
			return _address;
		}
	}

	@Override
	public void setAddress(String address) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_address = address;
	}

	@JSON
	@Override
	public long getContactId() {
		return _contactId;
	}

	@Override
	public void setContactId(long contactId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_contactId = contactId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalContactId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("contactId"));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, ContactEntry.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public ContactEntry toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, ContactEntry>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ContactEntryImpl contactEntryImpl = new ContactEntryImpl();

		contactEntryImpl.setEntryId(getEntryId());
		contactEntryImpl.setFamilyRelationship(getFamilyRelationship());
		contactEntryImpl.setPhone(getPhone());
		contactEntryImpl.setAddress(getAddress());
		contactEntryImpl.setContactId(getContactId());

		contactEntryImpl.resetOriginalValues();

		return contactEntryImpl;
	}

	@Override
	public ContactEntry cloneWithOriginalValues() {
		ContactEntryImpl contactEntryImpl = new ContactEntryImpl();

		contactEntryImpl.setEntryId(
			this.<Long>getColumnOriginalValue("entryId"));
		contactEntryImpl.setFamilyRelationship(
			this.<String>getColumnOriginalValue("familyRelationship"));
		contactEntryImpl.setPhone(this.<Long>getColumnOriginalValue("phone"));
		contactEntryImpl.setAddress(
			this.<String>getColumnOriginalValue("address"));
		contactEntryImpl.setContactId(
			this.<Long>getColumnOriginalValue("contactId"));

		return contactEntryImpl;
	}

	@Override
	public int compareTo(ContactEntry contactEntry) {
		int value = 0;

		value = getFamilyRelationship().compareTo(
			contactEntry.getFamilyRelationship());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof ContactEntry)) {
			return false;
		}

		ContactEntry contactEntry = (ContactEntry)object;

		long primaryKey = contactEntry.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<ContactEntry> toCacheModel() {
		ContactEntryCacheModel contactEntryCacheModel =
			new ContactEntryCacheModel();

		contactEntryCacheModel.entryId = getEntryId();

		contactEntryCacheModel.familyRelationship = getFamilyRelationship();

		String familyRelationship = contactEntryCacheModel.familyRelationship;

		if ((familyRelationship != null) &&
			(familyRelationship.length() == 0)) {

			contactEntryCacheModel.familyRelationship = null;
		}

		contactEntryCacheModel.phone = getPhone();

		contactEntryCacheModel.address = getAddress();

		String address = contactEntryCacheModel.address;

		if ((address != null) && (address.length() == 0)) {
			contactEntryCacheModel.address = null;
		}

		contactEntryCacheModel.contactId = getContactId();

		return contactEntryCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<ContactEntry, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<ContactEntry, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<ContactEntry, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((ContactEntry)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, ContactEntry>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					ContactEntry.class, ModelWrapper.class);

	}

	private long _entryId;
	private String _familyRelationship;
	private long _phone;
	private String _address;
	private long _contactId;

	public <T> T getColumnValue(String columnName) {
		Function<ContactEntry, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((ContactEntry)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("entryId", _entryId);
		_columnOriginalValues.put("familyRelationship", _familyRelationship);
		_columnOriginalValues.put("phone", _phone);
		_columnOriginalValues.put("address", _address);
		_columnOriginalValues.put("contactId", _contactId);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("entryId", 1L);

		columnBitmasks.put("familyRelationship", 2L);

		columnBitmasks.put("phone", 4L);

		columnBitmasks.put("address", 8L);

		columnBitmasks.put("contactId", 16L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private ContactEntry _escapedModel;

}